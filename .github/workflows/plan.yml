name: "0001- VM Plan & Deploy 01"


on:
  push:
    branches:
      - main
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  pull_request_target:
    types: [assigned, opened, synchronize, reopened]

jobs:
  PreReqs:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: "./Terraform/0001- VM Deployment 01"
    steps:
    # checkout the repo
    - uses: actions/checkout@v2
    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - uses: Azure/get-keyvault-secrets@v1
      with: 
        keyvault: "SharedServicesKeyVault"
        secrets: 'TenantID, SubscriptionID, TerraformSpSecret, TerraformSPID, TerraformStorageKey, github-test-admin-user, github-test-admin-pass'
      id: GetSecretAction

    - name: tfsec Security Scan
      if: github.event_name == 'pull_request'
      continue-on-error: true
      uses: triat/terraform-security-scan@v2.0.2
      #with: 
      #  tfsec_output_format: sarif
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
        
    #- name: tfsec
    #  uses: tfsec/tfsec-sarif-action@master
    #  with:
    #    sarif_file: tfsec.sarif         
        #github_token: ${{ secrets.GITHUB_TOKEN }}

    #- name: Upload SARIF file
    #  uses: github/codeql-action/upload-sarif@v1
    #  with:
    #    # Path to SARIF file relative to the root of the repository
    #    sarif_file: tfsec.sarif  

    
    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["**/*.tf"]'
      env:
        resource_group_name: ${{ secrets.STORAGEACCOUNTRG }}
        storage_account_name: ${{ secrets.STORAGEACCOUNTNAME }}
        container_name: ${{ secrets.STORAGECONTAINERNAME }}
        blob_name: ${{ secrets.BLOBNAME }}
        admin_user: ${{ steps.GetSecretAction.outputs.github-test-admin-user }}
        admin_pass: ${{ steps.GetSecretAction.outputs.github-test-admin-pass }}

    
    
    - uses: hashicorp/setup-terraform@v1
      with: 
        terraform_version: 0.15.3
      env:
        ARM_CLIENT_ID: ${{ steps.GetSecretAction.outputs.TerraformSPID }}
        ARM_CLIENT_SECRET: ${{ steps.GetSecretAction.outputs.TerraformSpSecret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.GetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.GetSecretAction.outputs.TenantID }}

      

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ steps.GetSecretAction.outputs.TerraformSPID }}
        ARM_CLIENT_SECRET: ${{ steps.GetSecretAction.outputs.TerraformSpSecret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.GetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.GetSecretAction.outputs.TenantID }}

      
        


    - name: Terraform Format
      id: fmt
      run: terraform fmt
      env:
        ARM_CLIENT_ID: ${{ steps.GetSecretAction.outputs.TerraformSPID }}
        ARM_CLIENT_SECRET: ${{ steps.GetSecretAction.outputs.TerraformSpSecret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.GetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.GetSecretAction.outputs.TenantID }}

      


    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true
      env:
        ARM_CLIENT_ID: ${{ steps.GetSecretAction.outputs.TerraformSPID }}
        ARM_CLIENT_SECRET: ${{ steps.GetSecretAction.outputs.TerraformSpSecret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.GetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.GetSecretAction.outputs.TenantID }}




    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      
      
      
      
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ steps.GetSecretAction.outputs.TerraformSPID }}
        ARM_CLIENT_SECRET: ${{ steps.GetSecretAction.outputs.TerraformSpSecret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.GetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.GetSecretAction.outputs.TenantID }}

